DELIMITER $$
CREATE PROCEDURE RegisterSchoolCoordinator(
    IN a_email VARCHAR(50),
    IN a_firstname VARCHAR(50),
    IN a_middlename VARCHAR(50),
    IN a_lastname VARCHAR(50),
    IN a_phone_number VARCHAR(50),
    IN a_password VARCHAR(50)    
)
BEGIN
    IF EXISTS (SELECT 1 FROM SchoolCoordinator WHERE email = a_email) THEN
        SIGNAL SQLSTATE '45000' 
            SET MESSAGE_TEXT = 'Email is already registered';
    ELSEIF EXISTS (SELECT 1 FROM SchoolCoordinator WHERE firstname = a_firstname AND middlename = a_middlename AND lastname = a_lastname) THEN
        SIGNAL SQLSTATE '45000'
            SET MESSAGE_TEXT = 'Coordinator is already exists';
    ELSEIF EXISTS (SELECT 1 FROM SchoolCoordinator WHERE phone_number = a_phone_number) THEN
        SIGNAL SQLSTATE '45000'
            SET MESSAGE_TEXT = 'Phone number is already exists';
    ELSE
        INSERT INTO SchoolCoordinator(email, firstname, middlename, lastname, phone_number, password)
        VALUES (a_email, a_firstname, a_middlename, a_lastname, a_phone_number, a_password);
    END IF;
END $$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE HandleSchoolCoordinatorApproval(
    IN a_admin_id INT,
    IN a_school_coordinator_id INT,
    IN a_status VARCHAR(25)
)
BEGIN
    IF a_status = 'approved' THEN 
        UPDATE SchoolCoordinator
        SET admin_id = a_admin_id,
            is_approved = TRUE
        WHERE school_coordinator_id = a_school_coordinator_id;

    ELSEIF a_status = 'declined' THEN 
        UPDATE SchoolCoordinator
        SET admin_id = a_admin_id, 
            is_approved = FALSE
        WHERE school_coordinator_id = a_school_coordinator_id;
    END IF;
END $$
DELIMITER ;





DELIMITER $$ 
CREATE PROCEDURE RegisterHospitalCoordinator(
    IN a_email VARCHAR(50),
    IN a_firstname VARCHAR(50),
    IN a_middlename VARCHAR(50),
    IN a_lastname VARCHAR(50),
    IN a_phone_number VARCHAR(50),
    IN a_password VARCHAR(50)    
)
BEGIN
    IF EXISTS (SELECT 1 FROM HospitalCoordinator WHERE email = a_email) THEN
        SIGNAL SQLSTATE '45000' 
            SET MESSAGE_TEXT = 'Email is already registered';
    ELSEIF EXISTS (SELECT 1 FROM HospitalCoordinator WHERE firstname = a_firstname AND middlename = a_middlename AND lastname = a_lastname) THEN
        SIGNAL SQLSTATE '45000'
            SET MESSAGE_TEXT = 'Coordinator is already exists';
    ELSEIF EXISTS (SELECT 1 FROM HospitalCoordinator WHERE phone_number = a_phone_number) THEN
        SIGNAL SQLSTATE '45000'
            SET MESSAGE_TEXT = 'Phone number is already exists';
    ELSE
        INSERT INTO HospitalCoordinator(email, firstname, middlename, lastname, phone_number, password)
        VALUES (a_email, a_firstname, a_middlename, a_lastname, a_phone_number, a_password);
    END IF;
END $$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE HandleHospitalCoordinatorApproval(
    IN a_admin_id INT,
    IN a_hospital_coordinator_id INT,
    IN a_status VARCHAR(25)
)
BEGIN
    IF a_status = 'approved' THEN
        UPDATE HospitalCoordinator
        SET admin_id = a_admin_id,
            is_approved = TRUE
        WHERE hospital_coordinator_id = a_hospital_coordinator_id;

    ELSEIF a_status = 'declined' THEN
        UPDATE HospitalCoordinator
        SET admin_id = a_admin_id,
            is_approved = FALSE
        WHERE hospital_coordinator_id = a_hospital_coordinator_id;
    END IF;
END $$
DELIMITER ;







DELIMITER $$

CREATE PROCEDURE AddHospitalStaff(
    IN p_hospital_coordinator_id INT,
    IN p_staff_profile LONGBLOB,
    IN p_firstname VARCHAR(50),
    IN p_middlename VARCHAR(50),
    IN p_lastname VARCHAR(50),
    IN p_email VARCHAR(50),
    IN p_phone_number VARCHAR(50),
    IN p_birthdate DATE,
    IN p_gender ENUM('Male','Female','Other'),
    IN p_role TEXT
)
BEGIN
    IF NOT EXISTS (SELECT 1 FROM HospitalCoordinator WHERE hospital_coordinator_id = p_hospital_coordinator_id) THEN
        SIGNAL SQLSTATE '45000'
            SET MESSAGE_TEXT = 'Coordinator does not exist';
    ELSEIF EXISTS (SELECT 1 FROM HospitalStaff WHERE email = p_email) THEN
        SIGNAL SQLSTATE '45000'
            SET MESSAGE_TEXT = 'Duplicate email not allowed';
    ELSEIF EXISTS (SELECT 1 FROM HospitalStaff WHERE phone_number = p_phone_number) THEN
        SIGNAL SQLSTATE '45000'
            SET MESSAGE_TEXT = 'Duplicate phone number not allowed';
    ELSE
        INSERT INTO HospitalStaff(hospital_coordinator_id, staff_profile, firstname, middlename, lastname, email, phone_number, birthdate, gender, role)
            VALUES (p_hospital_coordinator_id, p_staff_profile, p_firstname, p_middlename, p_lastname, p_email, p_phone_number, p_birthdate, p_gender, p_role);
    END IF;
END$$

DELIMITER ;



DELIMITER $$
CREATE PROCEDURE AddSchool(
    IN a_school_profile LONGBLOB,
    IN a_school_name VARCHAR(255),
    IN a_school_number VARCHAR(255),
    IN a_school_code VARCHAR(255),
    IN a_school_email VARCHAR(255),
    IN a_school_address VARCHAR(255),
    IN a_school_bio VARCHAR(255),
    IN a_school_coordinator_id INT
)
BEGIN
    IF EXISTS (SELECT 1 FROM School WHERE school_name = a_school_name) THEN
        SIGNAL SQLSTATE '45000'
            SET MESSAGE_TEXT = 'School already exists';
    ELSEIF EXISTS (SELECT 1 FROM School WHERE school_email = a_school_email) THEN
        SIGNAL SQLSTATE '45000'
            SET MESSAGE_TEXT = 'Email is already exists';
    ELSEIF EXISTS (SELECT 1 FROM School WHERE school_number = a_school_number) THEN
        SIGNAL SQLSTATE '45000'
            SET MESSAGE_TEXT = 'Number is already exists';
    ELSE
        INSERT INTO School(school_profile, school_name, school_number, school_code, school_email, school_address, school_bio, school_coordinator_id)
        VALUES (a_school_profile, a_school_name, a_school_number, a_school_code, a_school_email, a_school_address, a_school_bio, a_school_coordinator_id);
    END IF;
END $$
DELIMITER ;


DELIMITER $$
CREATE PROCEDURE HandleSchoolApproval(
    IN a_admin_id INT,
    IN a_school_id INT,
    IN a_status ENUM('approved','declined')
)
BEGIN
    IF a_status = 'approved' THEN
        UPDATE School
        SET admin_id = a_admin_id,
            is_approved = TRUE,
            approval_date = NOW()
        WHERE school_id = a_school_id;

    ELSEIF a_status = 'declined' THEN
        UPDATE School
        SET admin_id = a_admin_id,
            is_approved = FALSE,
            approval_date = NOW()
        WHERE school_id = a_school_id;
    END IF;
END$$
DELIMITER ;

   








DELIMITER $$
CREATE PROCEDURE EditSchoolCoordinatorProfile(
    IN a_school_coordinator_id INT,
    IN a_school_coordinator_profile LONGBLOB,
    IN a_email VARCHAR(50),
    IN a_firstname VARCHAR(50),
    IN a_middlename VARCHAR(50),
    IN a_lastname VARCHAR(50),
    IN a_phone_number VARCHAR(50),
    IN a_birthdate DATE,
    IN a_address TEXT,
    IN a_gender VARCHAR(50),
    IN a_bio TEXT
)
BEGIN
    IF NOT EXISTS (SELECT 1 FROM SchoolCoordinator WHERE school_coordinator_id = a_school_coordinator_id) THEN
        SIGNAL SQLSTATE '45000' 
            SET MESSAGE_TEXT = 'Coordinator does not exist';
    ELSEIF EXISTS (SELECT 1 FROM SchoolCoordinator 
                   WHERE email = a_email 
                   AND school_coordinator_id <> a_school_coordinator_id) THEN
        SIGNAL SQLSTATE '45000' 
            SET MESSAGE_TEXT = 'Email is already registered';
    ELSEIF EXISTS (SELECT 1 FROM SchoolCoordinator 
                   WHERE firstname = a_firstname 
                     AND middlename = a_middlename 
                     AND lastname = a_lastname
                     AND school_coordinator_id <> a_school_coordinator_id) THEN
        SIGNAL SQLSTATE '45000'
            SET MESSAGE_TEXT = 'Coordinator already exists with the same name';
    ELSEIF EXISTS (SELECT 1 FROM SchoolCoordinator 
                   WHERE phone_number = a_phone_number
                     AND school_coordinator_id <> a_school_coordinator_id) THEN
        SIGNAL SQLSTATE '45000'
            SET MESSAGE_TEXT = 'Phone number is already registered';
    ELSE
        UPDATE SchoolCoordinator 
        SET school_coordinator_profile = a_school_coordinator_profile,
            email = a_email,
            firstname = a_firstname,
            middlename = a_middlename,
            lastname = a_lastname,
            phone_number = a_phone_number,
            birthdate = a_birthdate,
            address = a_address,
            gender = a_gender,
            bio = a_bio
        WHERE school_coordinator_id = a_school_coordinator_id;
    END IF;
END $$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE EditHospitalCoordinatorProfile(
    IN a_hospital_coordinator_id INT,
    IN a_hospital_coordinator_profile LONGBLOB,
    IN a_email VARCHAR(50),
    IN a_firstname VARCHAR(50),
    IN a_middlename VARCHAR(50),
    IN a_lastname VARCHAR(50),
    IN a_phone_number VARCHAR(50),
    IN a_birthdate DATE,
    IN a_address TEXT,
    IN a_gender VARCHAR(50),
    IN a_bio TEXT
)
BEGIN
    IF NOT EXISTS (SELECT 1 FROM HospitalCoordinator WHERE hospital_coordinator_id = a_hospital_coordinator_id) THEN
        SIGNAL SQLSTATE '45000' 
            SET MESSAGE_TEXT = 'Coordinator does not exist';
    ELSEIF EXISTS (SELECT 1 FROM HospitalCoordinator 
                   WHERE email = a_email 
                   AND hospital_coordinator_id <> a_hospital_coordinator_id) THEN
        SIGNAL SQLSTATE '45000' 
            SET MESSAGE_TEXT = 'Email is already registered';
ELSEIF EXISTS (SELECT 1 FROM HospitalCoordinator 
               WHERE firstname = a_firstname 
                 AND middlename = a_middlename 
                 AND lastname = a_lastname
                 AND hospital_coordinator_id <> a_hospital_coordinator_id) THEN
    SIGNAL SQLSTATE '45000'
        SET MESSAGE_TEXT = 'Coordinator already exists with the same name';
    ELSEIF EXISTS (SELECT 1 FROM HospitalCoordinator 
                   WHERE phone_number = a_phone_number
                     AND hospital_coordinator_id <> a_hospital_coordinator_id) THEN
        SIGNAL SQLSTATE '45000'
            SET MESSAGE_TEXT = 'Phone number is already registered';
    ELSE
        UPDATE hospitalCoordinator 
        SET hospital_coordinator_profile = a_hospital_coordinator_profile,
            email = a_email,
            firstname = a_firstname,
            middlename = a_middlename,
            lastname = a_lastname,
            phone_number = a_phone_number,
            birthdate = a_birthdate,
            address = a_address,
            gender = a_gender,
            bio = a_bio
        WHERE hospital_coordinator_id = a_hospital_coordinator_id;
    END IF;
END $$
DELIMITER ;















DELIMITER $$
CREATE PROCEDURE DeleteSchool(
    IN a_school_id INT
)
BEGIN
    DELETE FROM School WHERE school_id = a_school_id;
END $$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE DeleteStudent(
    IN a_student_id INT
)
BEGIN
    DELETE FROM Student WHERE student_id = a_student_id;
END $$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE DeleteStaff(
    IN a_staff_id INT
)
BEGIN
    DELETE FROM HospitalStaff WHERE staff_id = a_staff_id;
END $$
DELIMITER ;




DELIMITER $$
CREATE PROCEDURE EditSchool(
    IN a_school_id INT,
    IN a_school_profile LONGBLOB,
    IN a_school_name VARCHAR(255),
    IN a_school_number VARCHAR(255),
    IN a_school_code VARCHAR(255),
    IN a_school_email VARCHAR(255),
    IN a_school_address TEXT,
    IN a_school_bio TEXT
)
BEGIN
    IF EXISTS (SELECT 1 FROM School WHERE school_name = a_school_name AND school_id <> a_school_id) THEN
        SIGNAL SQLSTATE '45000'
            SET MESSAGE_TEXT = 'School is already exists with the same name';
    ELSEIF EXISTS (SELECT 1 FROM School WHERE school_email = a_school_email AND school_id <> a_school_id) THEN
        SIGNAL SQLSTATE '45000'
            SET MESSAGE_TEXT = 'Email is already registered';
    ELSEIF EXISTS (SELECT 1 FROM School WHERE school_number = a_school_number AND school_id <> a_school_id) THEN
        SIGNAL SQLSTATE '45000'
            SET MESSAGE_TEXT = 'Phone number is already registered';
    ELSE
        UPDATE School
        SET school_profile = a_school_profile,
            school_name = a_school_name,    
            school_email = a_school_email,
            school_number = a_school_number,    
            school_code = a_school_code,
            school_address = a_school_address,
            school_bio = a_school_bio
        WHERE school_id = a_school_id;
    END IF;
END $$
DELIMITER ;



DELIMITER $$

CREATE PROCEDURE EditStudent(
    IN a_student_id INT,
    IN a_student_profile LONGBLOB,
    IN a_student_firstname VARCHAR(255),
    IN a_student_middlename VARCHAR(255),
    IN a_student_lastname VARCHAR(255),
    IN a_student_address TEXT,
    IN a_phone_number VARCHAR(20),
    IN a_student_email VARCHAR(255),
    IN a_student_birthdate DATE,
    IN a_student_gender ENUM('Male','Female','Other'),
    IN a_school_id INT
)
BEGIN
    IF EXISTS (SELECT 1 FROM Student WHERE student_email = a_student_email AND student_id <> a_student_id) THEN
        SIGNAL SQLSTATE '45000'
            SET MESSAGE_TEXT = 'Email is already registered';
    
    ELSEIF EXISTS (SELECT 1 FROM Student WHERE phone_number = a_phone_number AND student_id <> a_student_id) THEN
        SIGNAL SQLSTATE '45000'
            SET MESSAGE_TEXT = 'Phone number is already registered';
    
    ELSEIF EXISTS (SELECT 1 FROM Student WHERE student_firstname = a_student_firstname AND student_middlename = a_student_middlename AND student_lastname = a_student_lastname AND school_id = a_school_id AND student_id <> a_student_id) THEN
        SIGNAL SQLSTATE '45000'
            SET MESSAGE_TEXT = 'Student with this name already exists in this school';
    ELSE
        UPDATE Student
        SET student_profile = a_student_profile,
            student_firstname = a_student_firstname,
            student_middlename = a_student_middlename,
            student_lastname = a_student_lastname,
            student_address = a_student_address,
            phone_number = a_phone_number,
            student_email = a_student_email,
            student_birthdate = a_student_birthdate,
            student_gender = a_student_gender,
            school_id = a_school_id
        WHERE student_id = a_student_id;
    END IF;
END$$

DELIMITER ;


DELIMITER $$

DELIMITER $$

CREATE PROCEDURE EditHospitalStaff(
    IN a_staff_id INT,
    IN a_hospital_coordinator_id INT,
    IN a_staff_profile LONGBLOB,
    IN a_firstname VARCHAR(50),
    IN a_middlename VARCHAR(50),
    IN a_lastname VARCHAR(50),
    IN a_email VARCHAR(50),
    IN a_phone_number VARCHAR(50),
    IN a_birthdate DATE,
    IN a_gender ENUM('Male', 'Female', 'Other'),
    IN a_role TEXT
)
BEGIN
    IF EXISTS (
        SELECT 1 FROM HospitalStaff 
        WHERE email = a_email AND staff_id <> a_staff_id
    ) THEN
        SIGNAL SQLSTATE '45000'
            SET MESSAGE_TEXT = 'Email is already registered';

    ELSEIF EXISTS (
        SELECT 1 FROM HospitalStaff 
        WHERE phone_number = a_phone_number AND staff_id <> a_staff_id
    ) THEN
        SIGNAL SQLSTATE '45000'
            SET MESSAGE_TEXT = 'Phone number is already registered';

    ELSEIF EXISTS (
        SELECT 1 FROM HospitalStaff 
        WHERE firstname = a_firstname 
          AND middlename = a_middlename 
          AND lastname = a_lastname 
          AND hospital_coordinator_id = a_hospital_coordinator_id
          AND staff_id <> a_staff_id
    ) THEN
        SIGNAL SQLSTATE '45000'
            SET MESSAGE_TEXT = 'Staff with this name already exists under this coordinator';

    ELSE
        UPDATE HospitalStaff
        SET hospital_coordinator_id = a_hospital_coordinator_id,
            staff_profile = a_staff_profile,
            firstname = a_firstname,
            middlename = a_middlename,
            lastname = a_lastname,
            email = a_email,
            phone_number = a_phone_number,
            birthdate = a_birthdate,
            gender = a_gender,
            role = a_role
        WHERE staff_id = a_staff_id;
    END IF;
END$$

DELIMITER ;





DELIMITER $$

CREATE PROCEDURE AddStudent(
    IN a_student_profile LONGBLOB,
    IN a_student_firstname VARCHAR(255),
    IN a_student_middlename VARCHAR(255),
    IN a_student_lastname VARCHAR(255),
    IN a_student_address TEXT,
    IN a_phone_number VARCHAR(20),
    IN a_student_email VARCHAR(255),
    IN a_student_birthdate DATE,
    IN a_student_gender ENUM('Male','Female','Other'),
    IN a_school_id INT,
    IN a_school_coordinator_id INT
)
BEGIN
    IF EXISTS (SELECT 1 FROM Student WHERE student_email = a_student_email) THEN
        SIGNAL SQLSTATE '45000'
            SET MESSAGE_TEXT = 'Email is already registered';
    ELSEIF EXISTS (SELECT 1 FROM Student WHERE phone_number = a_phone_number) THEN
        SIGNAL SQLSTATE '45000'
            SET MESSAGE_TEXT = 'Phone number is already registered';
    ELSEIF EXISTS (
        SELECT 1 FROM Student WHERE student_firstname = a_student_firstname AND student_middlename = a_student_middlename AND student_lastname = a_student_lastname AND school_id = a_school_id) THEN
        SIGNAL SQLSTATE '45000'
            SET MESSAGE_TEXT = 'Student with this name already exists in this school';

    ELSE
        INSERT INTO Student (
            student_profile,
            student_firstname,
            student_middlename,
            student_lastname,
            student_address,
            phone_number,
            student_email,
            student_birthdate,
            student_gender,
            school_id,
            school_coordinator_id
        ) VALUES (
            a_student_profile,
            a_student_firstname,
            a_student_middlename,
            a_student_lastname,
            a_student_address,
            a_phone_number,
            a_student_email,
            a_student_birthdate,
            a_student_gender,
            a_school_id,
            a_school_coordinator_id
        );
    END IF;
END$$

DELIMITER ;


DELIMITER $$

CREATE PROCEDURE AddAppointment (
    IN p_hospital_coordinator_id INT,
    IN p_staff_id INT,
    IN p_appointment_date DATETIME,
    IN p_notes TEXT
)
BEGIN
    INSERT INTO Appointment (hospital_coordinator_id, staff_id, appointment_date, notes)
    VALUES (p_hospital_coordinator_id, p_staff_id, p_appointment_date, p_notes);
END$$

DELIMITER ;


DELIMITER $$

CREATE PROCEDURE addAppointmentStudents(
    IN p_appointment_id INT,
    IN p_student_ids TEXT
)
BEGIN
    DECLARE done INT DEFAULT 0;
    DECLARE cur_student_id INT;
    
    WHILE LENGTH(p_student_ids) > 0 DO
        -- Get the next student_id
        SET cur_student_id = CAST(SUBSTRING_INDEX(p_student_ids, ',', 1) AS UNSIGNED);

        -- Insert into AppointmentStudent
        INSERT IGNORE INTO AppointmentStudent (appointment_id, student_id)
        VALUES (p_appointment_id, cur_student_id);

        -- Remove the processed ID from the string
        IF LOCATE(',', p_student_ids) > 0 THEN
            SET p_student_ids = SUBSTRING(p_student_ids, LOCATE(',', p_student_ids) + 1);
        ELSE
            SET p_student_ids = '';
        END IF;
    END WHILE;
END$$

DELIMITER ;




DELIMITER $$

CREATE PROCEDURE AddHospitalPost (
    IN p_hospital_coordinator_id INT,
    IN p_title VARCHAR(255),
    IN p_content TEXT,
    IN p_imageFile LONGBLOB
)
BEGIN
    INSERT INTO HospitalPost (hospital_coordinator_id, title, content, imageFile)
    VALUES (p_hospital_coordinator_id, p_title, p_content, p_imageFile);
END$$

DELIMITER ;

